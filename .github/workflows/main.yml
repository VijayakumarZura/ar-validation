name: CI/CD workflow for Gradle Build and Sonar Code scan

on:
  push:
    branches:
      - main
  workflow_dispatch: null

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          distribution: adopt
          java-version: "11"
      - name: Build with Gradle
        run: |
          chmod +x ./gradlew
          ./gradlew build --scan
      - name: SonarQube scan
        uses: sonarsource/sonarqube-scan-action@master
        with:
          projectBaseDir: .
          args: -Dsonar.organization=VijayakumarZura
            -Dsonar.projectKey=VijayakumarZura_ar-validation_2a6bb681-8355-4fe8-b8d3-d475ac402b1c
            -Dsonar.java.binaries=build/classes
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
      - name: SonarQube Quality Gate check
        id: sonarqube-quality-gate-check
        uses: sonarsource/sonarqube-quality-gate-action@master
        timeout-minutes: 5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
      - name: Retrieve SonarQube Issues
        id: retrieve-sonarqube-issues
        run: |
          curl -u ${{ secrets.SONAR_TOKEN }} "$SONAR_HOST_URL/api/issues/search?componentKeys=VijayakumarZura_ar-validation_2a6bb681-8355-4fe8-b8d3-d475ac402b1c" -o issues.json
          echo "SonarQube issues fetched: $(jq .total .issues.json)"
      - name: Here is SonarQube Quality Gate Status value...
        run: echo "The Quality Gate status is ${{
          steps.sonarqube-quality-gate-check.outputs.quality-gate-status }}"

  send_email_notification:
    needs:
      - build
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Send email via Microsoft Graph
        env:
          AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          EMAIL_RECIPIENTS: vari@zuralabs.com
          EMAIL_FROM: vari@zuralabs.com
        run: |
          # Get the access token from Azure
          curl -X POST https://login.microsoftonline.com/$AZURE_TENANT_ID/oauth2/v2.0/token \
            -F grant_type=client_credentials \
            -F client_id=$AZURE_CLIENT_ID \
            -F client_secret=$AZURE_CLIENT_SECRET \
            -F scope=https://graph.microsoft.com/.default \
            -o token.json
          ACCESS_TOKEN=$(jq -r .access_token < token.json)

          # Get the result of the build job
          GRADLE_BUILD_STATUS="${{ needs.build.result }}"
          SONARQUBE_STATUS="${{ steps.sonarqube-quality-gate-check.outputs.quality-gate-status }}"
          SONARQUBE_ISSUES=$(cat issues.json)

          echo "Build result: $GRADLE_BUILD_STATUS"
          echo "SonarQube result: $SONARQUBE_STATUS"
          echo "SonarQube issues: $SONARQUBE_ISSUES"

          # Define the email subject and content based on SonarQube status
          if [[ "$GRADLE_BUILD_STATUS" == "success" && "$SONARQUBE_STATUS" == "OK" ]]; then
            STATUS="The SonarQube analysis passed successfully."
          else
            STATUS="The SonarQube analysis failed or quality gate not passed."
          fi

          # Prepare email body with SonarQube issues
          ISSUES_BODY="Here are the issues found in SonarQube analysis:\n\n"
          ISSUES_BODY+=$(jq -r '.issues[] | "- \(.message)\n" ' issues.json)

          # Prepare email content
          IFS=',' read -ra RECIPIENTS <<< "$EMAIL_RECIPIENTS"
          RECIPIENTS_JSON=$(for email in "${RECIPIENTS[@]}"; do printf '{"emailAddress": {"address": "%s"}},' "$email"; done | sed 's/,$//')

          # Send email with SonarQube results and issues
          curl -X POST https://graph.microsoft.com/v1.0/users/$EMAIL_FROM/sendMail \
            -H "Authorization: Bearer $ACCESS_TOKEN" \
            -H "Content-Type: application/json" \
            -d '{
              "message": {
                "subject": "GitHub Action Notification - SonarQube Result",
                "body": {
                  "contentType": "Text",
                  "content": "The GitHub Action workflow has completed. Build status: '"${GRADLE_BUILD_STATUS}"'. SonarQube status: '"${STATUS}"'.\n\n'"${ISSUES_BODY}"
                },
                "toRecipients": ['"$RECIPIENTS_JSON"']
              }
            }'
