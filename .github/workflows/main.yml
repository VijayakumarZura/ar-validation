name: CI/CD workflow for Gradle Build and Sonar Code scan

on:
  push:
    branches:
      - main
  workflow_dispatch: null

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          distribution: adopt
          java-version: "11"

      - name: Build with Gradle
        run: |
          chmod +x ./gradlew
          ./gradlew build --scan

      - name: SonarQube scan
        uses: sonarsource/sonarqube-scan-action@master
        with:
          projectBaseDir: .
          args: -Dsonar.organization=VijayakumarZura
            -Dsonar.projectKey=VijayakumarZura_ar-validation_2a6bb681-8355-4fe8-b8d3-d475ac402b1c
            -Dsonar.java.binaries=build/classes
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

      - name: SonarQube Quality Gate check
        id: sonarqube-quality-gate-check
        uses: sonarsource/sonarqube-quality-gate-action@master
        timeout-minutes: 5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

      - name: Fetch SonarQube Issues
        run: |
          curl -s -X GET "$SONAR_HOST_URL/api/issues/search?componentKeys=VijayakumarZura_ar-validation_2a6bb681-8355-4fe8-b8d3-d475ac402b1c" \
            -H "Authorization: Bearer $SONAR_TOKEN" \
            -o issues.json
          
          echo "SonarQube issues fetched: $(jq '.total' issues.json)"
        env:
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      - name: Upload SonarQube Issues
        uses: actions/upload-artifact@v3
        with:
          name: sonar-issues
          path: issues.json

  send_email_notification:
    needs: build
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Download SonarQube Issues
        uses: actions/download-artifact@v3
        with:
          name: sonar-issues

      - name: Send email via Microsoft Graph
        env:
          AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          EMAIL_RECIPIENTS: vari@zuralabs.com
          EMAIL_FROM: vari@zuralabs.com
        run: |
          curl -X POST "https://login.microsoftonline.com/$AZURE_TENANT_ID/oauth2/v2.0/token" \
            -F grant_type=client_credentials \
            -F client_id=$AZURE_CLIENT_ID \
            -F client_secret=$AZURE_CLIENT_SECRET \
            -F scope=https://graph.microsoft.com/.default \
            -o token.json
          
          ACCESS_TOKEN=$(jq -r .access_token < token.json)
          ISSUES=$(jq '[.issues[] | {key, message, severity}]' issues.json)
          EMAIL_BODY="SonarQube Scan Results:\n\n$ISSUES"
          
          curl -X POST "https://graph.microsoft.com/v1.0/users/$EMAIL_FROM/sendMail" \
            -H "Authorization: Bearer $ACCESS_TOKEN" \
            -H "Content-Type: application/json" \
            -d '{
              "message": {
                "subject": "GitHub Action Notification - SonarQube Report",
                "body": {
                  "contentType": "Text",
                  "content": "'"${EMAIL_BODY}"'"
                },
                "toRecipients": [{"emailAddress": {"address": "'"${EMAIL_RECIPIENTS}"'"}}]
              }
            }'
